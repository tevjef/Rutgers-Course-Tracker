apply plugin: 'com.github.ben-manes.versions'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'com.android.tools.build:gradle:2.1.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
    }
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://mint.splunk.com/gradle/"
        }
        maven {
            url "https://clojars.org/repo/"
        }
        maven { url "https://jitpack.io" }

    }
}



ext {
    Properties properties = new Properties()
    File propertiesFile = file('local.properties')
    propertiesFile.createNewFile()
    propertiesFile.withInputStream {
        properties.load(it)
    }

    keyAlias = properties.keyAlias
    keyPassword = properties.keyPassword
    storePassword = properties.storePassword
    storeFile = properties.storeFile == null? "/":properties.storeFile

    supportVersion = '24.2.0'

    // Adding reference to Java Home, RetroLambda needs this
    JAVA7_HOME = getJavaHome('1.7')
    JAVA8_HOME = getJavaHome('1.8')
}

/**
 * Obtain the Java Home absolute path given a version.
 *
 * In order to build this project, you must have both Java 8 and Java 7 installed.
 * On OSX, the method will find your Java paths using a command that comes installed with java.
 * (it calls an executable java places in "/usr/libexec/java_home")
 * <p>
 * On Windows you will need to set the Environment variables "JAVA7_HOME" and "JAVA8_HOME"
 *
 * @param version
 * The version to obtain the path for, e.g. '1.6', '1.7', '1.8'.
 *
 * @return
 * The absolute path to the Java home directory.
 */
def getJavaHome(version) {
    def cmd

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        int dotIndex = version.indexOf(".") + 1
        def majorVersion = version.getAt(dotIndex)
        cmd = "cmd /c \"echo %JAVA${majorVersion}_HOME%\""
        println "Attempting to use Windows env vars JAVA7_HOME and JAVA8_HOME to determine java locations"
    } else {
        cmd = "/usr/libexec/java_home -v ${version}"
    }

    def proc = cmd.execute()

    def javaHome = proc.text.trim()
    println "JavaHome for ${version} is \"${javaHome}\""

    return javaHome
}