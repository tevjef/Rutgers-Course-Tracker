// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: model.proto at 137:1
package com.tevinjeffrey.rutgersct.data.uctapi.model;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.util.List;
import okio.ByteString;

public final class Data extends AndroidMessage<Data, Data.Builder> {
  public static final ProtoAdapter<Data> ADAPTER = new ProtoAdapter_Data();

  public static final Parcelable.Creator<Data> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.University#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<University> universities;

  @WireField(
      tag = 2,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Subject#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Subject> subjects;

  @WireField(
      tag = 3,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Course#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Course> courses;

  @WireField(
      tag = 4,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Section#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Section> sections;

  @WireField(
      tag = 5,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.University#ADAPTER"
  )
  @Nullable
  public final University university;

  @WireField(
      tag = 6,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Subject#ADAPTER"
  )
  @Nullable
  public final Subject subject;

  @WireField(
      tag = 7,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Course#ADAPTER"
  )
  @Nullable
  public final Course course;

  @WireField(
      tag = 8,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Section#ADAPTER"
  )
  @Nullable
  public final Section section;

  public Data(
      List<University> universities,
      List<Subject> subjects,
      List<Course> courses,
      List<Section> sections,
      @Nullable University university,
      @Nullable Subject subject,
      @Nullable Course course,
      @Nullable Section section) {
    this(
        universities,
        subjects,
        courses,
        sections,
        university,
        subject,
        course,
        section,
        ByteString.EMPTY
    );
  }

  public Data(
      List<University> universities,
      List<Subject> subjects,
      List<Course> courses,
      List<Section> sections,
      @Nullable University university,
      @Nullable Subject subject,
      @Nullable Course course,
      @Nullable Section section,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.universities = Internal.immutableCopyOf("universities", universities);
    this.subjects = Internal.immutableCopyOf("subjects", subjects);
    this.courses = Internal.immutableCopyOf("courses", courses);
    this.sections = Internal.immutableCopyOf("sections", sections);
    this.university = university;
    this.subject = subject;
    this.course = course;
    this.section = section;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.universities = Internal.copyOf("universities", universities);
    builder.subjects = Internal.copyOf("subjects", subjects);
    builder.courses = Internal.copyOf("courses", courses);
    builder.sections = Internal.copyOf("sections", sections);
    builder.university = university;
    builder.subject = subject;
    builder.course = course;
    builder.section = section;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if (!(other instanceof Data)) {
      return false;
    }
    Data o = (Data) other;
    return unknownFields().equals(o.unknownFields())
        && universities.equals(o.universities)
        && subjects.equals(o.subjects)
        && courses.equals(o.courses)
        && sections.equals(o.sections)
        && Internal.equals(university, o.university)
        && Internal.equals(subject, o.subject)
        && Internal.equals(course, o.course)
        && Internal.equals(section, o.section);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + universities.hashCode();
      result = result * 37 + subjects.hashCode();
      result = result * 37 + courses.hashCode();
      result = result * 37 + sections.hashCode();
      result = result * 37 + (university != null ? university.hashCode() : 0);
      result = result * 37 + (subject != null ? subject.hashCode() : 0);
      result = result * 37 + (course != null ? course.hashCode() : 0);
      result = result * 37 + (section != null ? section.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!universities.isEmpty()) {
      builder.append(", universities=").append(universities);
    }
    if (!subjects.isEmpty()) {
      builder.append(", subjects=").append(subjects);
    }
    if (!courses.isEmpty()) {
      builder.append(", courses=").append(courses);
    }
    if (!sections.isEmpty()) {
      builder.append(", sections=").append(sections);
    }
    if (university != null) {
      builder.append(", university=").append(university);
    }
    if (subject != null) {
      builder.append(", subject=").append(subject);
    }
    if (course != null) {
      builder.append(", course=").append(course);
    }
    if (section != null) {
      builder.append(", section=").append(section);
    }
    return builder.replace(0, 2, "Data{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Data, Builder> {
    public List<University> universities;

    public List<Subject> subjects;

    public List<Course> courses;

    public List<Section> sections;

    public University university;

    public Subject subject;

    public Course course;

    public Section section;

    public Builder() {
      universities = Internal.newMutableList();
      subjects = Internal.newMutableList();
      courses = Internal.newMutableList();
      sections = Internal.newMutableList();
    }

    public Builder universities(List<University> universities) {
      Internal.checkElementsNotNull(universities);
      this.universities = universities;
      return this;
    }

    public Builder subjects(List<Subject> subjects) {
      Internal.checkElementsNotNull(subjects);
      this.subjects = subjects;
      return this;
    }

    public Builder courses(List<Course> courses) {
      Internal.checkElementsNotNull(courses);
      this.courses = courses;
      return this;
    }

    public Builder sections(List<Section> sections) {
      Internal.checkElementsNotNull(sections);
      this.sections = sections;
      return this;
    }

    public Builder university(University university) {
      this.university = university;
      return this;
    }

    public Builder subject(Subject subject) {
      this.subject = subject;
      return this;
    }

    public Builder course(Course course) {
      this.course = course;
      return this;
    }

    public Builder section(Section section) {
      this.section = section;
      return this;
    }

    @Override
    public Data build() {
      return new Data(
          universities,
          subjects,
          courses,
          sections,
          university,
          subject,
          course,
          section,
          super.buildUnknownFields()
      );
    }
  }

  private static final class ProtoAdapter_Data extends ProtoAdapter<Data> {
    ProtoAdapter_Data() {
      super(FieldEncoding.LENGTH_DELIMITED, Data.class);
    }

    @Override
    public int encodedSize(Data value) {
      return University.ADAPTER.asRepeated().encodedSizeWithTag(1, value.universities)
          + Subject.ADAPTER.asRepeated().encodedSizeWithTag(2, value.subjects)
          + Course.ADAPTER.asRepeated().encodedSizeWithTag(3, value.courses)
          + Section.ADAPTER.asRepeated().encodedSizeWithTag(4, value.sections)
          + (value.university != null ? University.ADAPTER.encodedSizeWithTag(5, value.university)
                                      : 0)
          + (value.subject != null ? Subject.ADAPTER.encodedSizeWithTag(6, value.subject) : 0)
          + (value.course != null ? Course.ADAPTER.encodedSizeWithTag(7, value.course) : 0)
          + (value.section != null ? Section.ADAPTER.encodedSizeWithTag(8, value.section) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Data value) throws IOException {
      University.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.universities);
      Subject.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.subjects);
      Course.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.courses);
      Section.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.sections);
      if (value.university != null) {
        University.ADAPTER.encodeWithTag(writer, 5, value.university);
      }
      if (value.subject != null) {
        Subject.ADAPTER.encodeWithTag(writer, 6, value.subject);
      }
      if (value.course != null) {
        Course.ADAPTER.encodeWithTag(writer, 7, value.course);
      }
      if (value.section != null) {
        Section.ADAPTER.encodeWithTag(writer, 8, value.section);
      }
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Data decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1; ) {
        switch (tag) {
          case 1:
            builder.universities.add(University.ADAPTER.decode(reader));
            break;
          case 2:
            builder.subjects.add(Subject.ADAPTER.decode(reader));
            break;
          case 3:
            builder.courses.add(Course.ADAPTER.decode(reader));
            break;
          case 4:
            builder.sections.add(Section.ADAPTER.decode(reader));
            break;
          case 5:
            builder.university(University.ADAPTER.decode(reader));
            break;
          case 6:
            builder.subject(Subject.ADAPTER.decode(reader));
            break;
          case 7:
            builder.course(Course.ADAPTER.decode(reader));
            break;
          case 8:
            builder.section(Section.ADAPTER.decode(reader));
            break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Data redact(Data value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.universities, University.ADAPTER);
      Internal.redactElements(builder.subjects, Subject.ADAPTER);
      Internal.redactElements(builder.courses, Course.ADAPTER);
      Internal.redactElements(builder.sections, Section.ADAPTER);
      if (builder.university != null) {
        builder.university = University.ADAPTER.redact(builder.university);
      }
      if (builder.subject != null) {
        builder.subject = Subject.ADAPTER.redact(builder.subject);
      }
      if (builder.course != null) {
        builder.course = Course.ADAPTER.redact(builder.course);
      }
      if (builder.section != null) {
        builder.section = Section.ADAPTER.redact(builder.section);
      }
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
