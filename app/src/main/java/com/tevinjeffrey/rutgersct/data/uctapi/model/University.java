// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: model.proto at 5:1
package com.tevinjeffrey.rutgersct.data.uctapi.model;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class University extends AndroidMessage<University, University.Builder> {
  public static final ProtoAdapter<University> ADAPTER = new ProtoAdapter_University();

  public static final Parcelable.Creator<University> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_ABBR = "";

  public static final String DEFAULT_HOME_PAGE = "";

  public static final String DEFAULT_REGISTRATION_PAGE = "";

  public static final String DEFAULT_MAIN_COLOR = "";

  public static final String DEFAULT_ACCENT_COLOR = "";

  public static final String DEFAULT_TOPIC_NAME = "";

  public static final String DEFAULT_TOPIC_ID = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @Nullable
  public final Long id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String name;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String abbr;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String home_page;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String registration_page;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String main_color;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String accent_color;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String topic_name;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String topic_id;

  @WireField(
      tag = 10,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.ResolvedSemester#ADAPTER"
  )
  @Nullable
  public final ResolvedSemester resolved_semesters;

  @WireField(
      tag = 11,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Subject#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Subject> subjects;

  @WireField(
      tag = 12,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Semester#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Semester> available_semesters;

  @WireField(
      tag = 13,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Registration#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Registration> registrations;

  @WireField(
      tag = 14,
      adapter = "com.tevinjeffrey.rutgersct.data.uctapi.model.Metadata#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Metadata> metadata;

  public University(@Nullable Long id, @Nullable String name, @Nullable String abbr, @Nullable String home_page, @Nullable String registration_page, @Nullable String main_color, @Nullable String accent_color, @Nullable String topic_name, @Nullable String topic_id, @Nullable ResolvedSemester resolved_semesters, List<Subject> subjects, List<Semester> available_semesters, List<Registration> registrations, List<Metadata> metadata) {
    this(id, name, abbr, home_page, registration_page, main_color, accent_color, topic_name, topic_id, resolved_semesters, subjects, available_semesters, registrations, metadata, ByteString.EMPTY);
  }

  public University(@Nullable Long id, @Nullable String name, @Nullable String abbr, @Nullable String home_page, @Nullable String registration_page, @Nullable String main_color, @Nullable String accent_color, @Nullable String topic_name, @Nullable String topic_id, @Nullable ResolvedSemester resolved_semesters, List<Subject> subjects, List<Semester> available_semesters, List<Registration> registrations, List<Metadata> metadata, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.abbr = abbr;
    this.home_page = home_page;
    this.registration_page = registration_page;
    this.main_color = main_color;
    this.accent_color = accent_color;
    this.topic_name = topic_name;
    this.topic_id = topic_id;
    this.resolved_semesters = resolved_semesters;
    this.subjects = Internal.immutableCopyOf("subjects", subjects);
    this.available_semesters = Internal.immutableCopyOf("available_semesters", available_semesters);
    this.registrations = Internal.immutableCopyOf("registrations", registrations);
    this.metadata = Internal.immutableCopyOf("metadata", metadata);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.abbr = abbr;
    builder.home_page = home_page;
    builder.registration_page = registration_page;
    builder.main_color = main_color;
    builder.accent_color = accent_color;
    builder.topic_name = topic_name;
    builder.topic_id = topic_id;
    builder.resolved_semesters = resolved_semesters;
    builder.subjects = Internal.copyOf("subjects", subjects);
    builder.available_semesters = Internal.copyOf("available_semesters", available_semesters);
    builder.registrations = Internal.copyOf("registrations", registrations);
    builder.metadata = Internal.copyOf("metadata", metadata);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof University)) return false;
    University o = (University) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(abbr, o.abbr)
        && Internal.equals(home_page, o.home_page)
        && Internal.equals(registration_page, o.registration_page)
        && Internal.equals(main_color, o.main_color)
        && Internal.equals(accent_color, o.accent_color)
        && Internal.equals(topic_name, o.topic_name)
        && Internal.equals(topic_id, o.topic_id)
        && Internal.equals(resolved_semesters, o.resolved_semesters)
        && subjects.equals(o.subjects)
        && available_semesters.equals(o.available_semesters)
        && registrations.equals(o.registrations)
        && metadata.equals(o.metadata);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (abbr != null ? abbr.hashCode() : 0);
      result = result * 37 + (home_page != null ? home_page.hashCode() : 0);
      result = result * 37 + (registration_page != null ? registration_page.hashCode() : 0);
      result = result * 37 + (main_color != null ? main_color.hashCode() : 0);
      result = result * 37 + (accent_color != null ? accent_color.hashCode() : 0);
      result = result * 37 + (topic_name != null ? topic_name.hashCode() : 0);
      result = result * 37 + (topic_id != null ? topic_id.hashCode() : 0);
      result = result * 37 + (resolved_semesters != null ? resolved_semesters.hashCode() : 0);
      result = result * 37 + subjects.hashCode();
      result = result * 37 + available_semesters.hashCode();
      result = result * 37 + registrations.hashCode();
      result = result * 37 + metadata.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (abbr != null) builder.append(", abbr=").append(abbr);
    if (home_page != null) builder.append(", home_page=").append(home_page);
    if (registration_page != null) builder.append(", registration_page=").append(registration_page);
    if (main_color != null) builder.append(", main_color=").append(main_color);
    if (accent_color != null) builder.append(", accent_color=").append(accent_color);
    if (topic_name != null) builder.append(", topic_name=").append(topic_name);
    if (topic_id != null) builder.append(", topic_id=").append(topic_id);
    if (resolved_semesters != null) builder.append(", resolved_semesters=").append(resolved_semesters);
    if (!subjects.isEmpty()) builder.append(", subjects=").append(subjects);
    if (!available_semesters.isEmpty()) builder.append(", available_semesters=").append(available_semesters);
    if (!registrations.isEmpty()) builder.append(", registrations=").append(registrations);
    if (!metadata.isEmpty()) builder.append(", metadata=").append(metadata);
    return builder.replace(0, 2, "University{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<University, Builder> {
    public Long id;

    public String name;

    public String abbr;

    public String home_page;

    public String registration_page;

    public String main_color;

    public String accent_color;

    public String topic_name;

    public String topic_id;

    public ResolvedSemester resolved_semesters;

    public List<Subject> subjects;

    public List<Semester> available_semesters;

    public List<Registration> registrations;

    public List<Metadata> metadata;

    public Builder() {
      subjects = Internal.newMutableList();
      available_semesters = Internal.newMutableList();
      registrations = Internal.newMutableList();
      metadata = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder abbr(String abbr) {
      this.abbr = abbr;
      return this;
    }

    public Builder home_page(String home_page) {
      this.home_page = home_page;
      return this;
    }

    public Builder registration_page(String registration_page) {
      this.registration_page = registration_page;
      return this;
    }

    public Builder main_color(String main_color) {
      this.main_color = main_color;
      return this;
    }

    public Builder accent_color(String accent_color) {
      this.accent_color = accent_color;
      return this;
    }

    public Builder topic_name(String topic_name) {
      this.topic_name = topic_name;
      return this;
    }

    public Builder topic_id(String topic_id) {
      this.topic_id = topic_id;
      return this;
    }

    public Builder resolved_semesters(ResolvedSemester resolved_semesters) {
      this.resolved_semesters = resolved_semesters;
      return this;
    }

    public Builder subjects(List<Subject> subjects) {
      Internal.checkElementsNotNull(subjects);
      this.subjects = subjects;
      return this;
    }

    public Builder available_semesters(List<Semester> available_semesters) {
      Internal.checkElementsNotNull(available_semesters);
      this.available_semesters = available_semesters;
      return this;
    }

    public Builder registrations(List<Registration> registrations) {
      Internal.checkElementsNotNull(registrations);
      this.registrations = registrations;
      return this;
    }

    public Builder metadata(List<Metadata> metadata) {
      Internal.checkElementsNotNull(metadata);
      this.metadata = metadata;
      return this;
    }

    @Override
    public University build() {
      return new University(id, name, abbr, home_page, registration_page, main_color, accent_color, topic_name, topic_id, resolved_semesters, subjects, available_semesters, registrations, metadata, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_University extends ProtoAdapter<University> {
    ProtoAdapter_University() {
      super(FieldEncoding.LENGTH_DELIMITED, University.class);
    }

    @Override
    public int encodedSize(University value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + (value.abbr != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.abbr) : 0)
          + (value.home_page != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.home_page) : 0)
          + (value.registration_page != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.registration_page) : 0)
          + (value.main_color != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.main_color) : 0)
          + (value.accent_color != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.accent_color) : 0)
          + (value.topic_name != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.topic_name) : 0)
          + (value.topic_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.topic_id) : 0)
          + (value.resolved_semesters != null ? ResolvedSemester.ADAPTER.encodedSizeWithTag(10, value.resolved_semesters) : 0)
          + Subject.ADAPTER.asRepeated().encodedSizeWithTag(11, value.subjects)
          + Semester.ADAPTER.asRepeated().encodedSizeWithTag(12, value.available_semesters)
          + Registration.ADAPTER.asRepeated().encodedSizeWithTag(13, value.registrations)
          + Metadata.ADAPTER.asRepeated().encodedSizeWithTag(14, value.metadata)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, University value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.abbr != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.abbr);
      if (value.home_page != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.home_page);
      if (value.registration_page != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.registration_page);
      if (value.main_color != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.main_color);
      if (value.accent_color != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.accent_color);
      if (value.topic_name != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.topic_name);
      if (value.topic_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.topic_id);
      if (value.resolved_semesters != null) ResolvedSemester.ADAPTER.encodeWithTag(writer, 10, value.resolved_semesters);
      Subject.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.subjects);
      Semester.ADAPTER.asRepeated().encodeWithTag(writer, 12, value.available_semesters);
      Registration.ADAPTER.asRepeated().encodeWithTag(writer, 13, value.registrations);
      Metadata.ADAPTER.asRepeated().encodeWithTag(writer, 14, value.metadata);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public University decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.abbr(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.home_page(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.registration_page(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.main_color(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.accent_color(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.topic_name(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.topic_id(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.resolved_semesters(ResolvedSemester.ADAPTER.decode(reader)); break;
          case 11: builder.subjects.add(Subject.ADAPTER.decode(reader)); break;
          case 12: builder.available_semesters.add(Semester.ADAPTER.decode(reader)); break;
          case 13: builder.registrations.add(Registration.ADAPTER.decode(reader)); break;
          case 14: builder.metadata.add(Metadata.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public University redact(University value) {
      Builder builder = value.newBuilder();
      if (builder.resolved_semesters != null) builder.resolved_semesters = ResolvedSemester.ADAPTER.redact(builder.resolved_semesters);
      Internal.redactElements(builder.subjects, Subject.ADAPTER);
      Internal.redactElements(builder.available_semesters, Semester.ADAPTER);
      Internal.redactElements(builder.registrations, Registration.ADAPTER);
      Internal.redactElements(builder.metadata, Metadata.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
